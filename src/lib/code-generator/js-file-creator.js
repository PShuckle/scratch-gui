import JSZip from 'jszip';
import VariableNameGenerator from "./variable-name-generator";

export default function createProject(files) {
    var zip = new JSZip();
    const variableNameGenerator = new VariableNameGenerator();

    var globalVars = {};

    // for each variable name generated by the code, store the generated variable name as the key
    // and the name of the corresponding Scratch variable as the value. This is to ensure that all
    // variable names used in the generated Javascript code are legal (eg contain no spaces)
    const localSymbolNameLookup = {};
    const globalSymbolNameLookup = {};
    const functionWarpLookup = {};

    const drawList = '[' + files.Stage.targetData.renderer._drawList.toString() + ']';

    Object.keys(files).forEach((name) => {
        var className = variableNameGenerator.generateClassName(name);

        var fileCode = createFileSkeleton(className);
        var generatedJsCode = files[name].code;
        var variables = files[name].variables;
        var params = files[name].params;
        var functions = files[name].functions;

        var fileConstructorCode = '';

        Object.keys(variables).forEach(variable => {
            // initalise lists to [] and all other variables to 0
            var init = 0;
            if (variables[variable].type == 'list') {
                init = [];
            } else if (variables[variable].type == 'broadcast_msg') {
                init = variables[variable].scratchName;
            }

            fileConstructorCode += '\nthis.' +
                variable +
                ' = ' + JSON.stringify({
                    value: init,
                    isLocal: variables[variable].local,
                    isCloud: variables[variable].cloud,
                    scratchName: variables[variable].scratchName,
                    jsName: variables[variable].jsName
                })

            if (variables[variable].local == 'false') {
                globalVars[variable] = JSON.stringify({
                    value: init,
                    isLocal: variables[variable].local,
                    isCloud: variables[variable].cloud,
                    scratchName: variables[variable].scratchName,
                    jsName: variables[variable].jsName
                });
                globalSymbolNameLookup[variable] = variables[variable].scratchName;
            }

            // if (variables[variable].local == 'true') {


            // } else {
            //     globalVars[variable] = {
            //         value: ' + init + '
            //     };
            //     globalSymbolNameLookup[variable] = variables[variable].scratchName;
            // }
            // localSymbolNameLookup[variable] = variables[variable].scratchName;

        })

        fileConstructorCode += '\n';

        var codeSnippets = generatedJsCode.split('\n\n');

        var procedures = '';

        codeSnippets.forEach(snippet => {
            if (snippet.includes('event_whenflagclicked')) {
                // remove first line of code from snippet 
                // - this is the code representing the hat block
                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);

                fileCode = fileCode.replace(`event_whenflagclicked() {`,
                    `event_whenflagclicked() {
                        setTimeout(function() {
                        ` + trimmedSnippet + `
                    }, 0)`)


            }
            if (snippet.includes('event_whenkeypressed')) {
                var keyPressPattern = /(?:event_whenkeypressed\()(?<keyname>[^()]*)(?:\))/g;
                var key = keyPressPattern.exec(snippet);

                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);

                fileCode = fileCode.replace(`event_whenkeypressed(key) {`,
                    `event_whenkeypressed(key) {
                        if ((key == ` + key.groups.keyname + `)) {
                                setTimeout(function() {
                                ` + trimmedSnippet + `
                            }, 0)
                        }`)
            }
            if (snippet.includes('event_whenthisspriteclicked')) {
                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);
                fileCode = fileCode.replace(`event_whenthisspriteclicked() {`,
                    `event_whenthisspriteclicked() {
                        setTimeout(function() {
                        ` + trimmedSnippet + `
                    }, 0)`)
            }

            if (snippet.includes('event_whenbackdropswitchesto')) {
                var backdropPattern = /(?:event_whenbackdropswitchesto\()(?<backdropname>[^()]*)(?:\))/;
                var backdrop = backdropPattern.exec(snippet);

                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);
                fileCode = fileCode.replace(`event_whenbackdropswitchesto(backdrop) {`,
                    `event_whenbackdropswitchesto(backdrop) {
                        if ((backdrop == ` + backdrop.groups.backdropname + `)) {
                                setTimeout(function() {
                                ` + trimmedSnippet + `
                            }, 0)
                        }`)
            }

            if (snippet.includes('event_whengreaterthan')) {
                var greaterThanPattern = /(?:event_whengreaterthan\()(?<whengreaterthanmenu>[^,]*?), (?<value>[^\n]*?)(?:\);)/;
                var greaterThan = greaterThanPattern.exec(snippet);

                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);

                fileCode = fileCode.replace(`event_whengreaterthan() {`,
                    `event_whengreaterthan() {
                        if ((` + greaterThan.groups.whengreaterthanmenu + ` > ` +
                    greaterThan.groups.value + `)) {
                                    setTimeout(function() {
                                    ` + trimmedSnippet + `
                                }, 0)
                            }`)
            }

            if (snippet.includes('event_whenbroadcastreceived')) {
                var messagePattern = /(?:event_whenbroadcastreceived\()(?<messagetext>[^()]*)(?:\))/;
                var message = messagePattern.exec(snippet);

                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);
                fileCode = fileCode.replace(`event_whenbroadcastreceived(message) {`,
                    `event_whenbroadcastreceived(message) {
                        if ((message == ` + message.groups.messagetext + `)) {
                                setTimeout(function() {
                                ` + trimmedSnippet + `
                            }, 0)
                        }`)
            }

            if (snippet.includes('control_start_as_clone')) {
                var trimmedSnippet = snippet.substring(snippet.indexOf('\n') + 1);

                fileCode = fileCode.replace(`control_start_as_clone() {`,
                    `control_start_as_clone() {
                        setTimeout(function() {
                        ` + trimmedSnippet + `
                    }, 0)`)
            }

            if (snippet.includes('procedures_definition')) {
                var functionNamePattern = /(?:procedures_prototype\(this\.)(?<funcName>.*?), (?<warp>.*?)(?:(, |\))(.|\n)*?})/
                var functionParamPattern = /(?:argument_reporter_.*?\()(?<name>.*?)(?:\))/g
                var func = functionNamePattern.exec(snippet);
                var functionParamList = '';
                var param;
                while (param = functionParamPattern.exec(func)) {
                    localSymbolNameLookup[param.groups.name] = params[param.groups.name].scratchName;

                    functionParamList += param.groups.name + ', ';
                }

                var trimmedSnippet = snippet.substring(snippet.indexOf('});') + 3);

                functionWarpLookup[func.groups.funcName] = func.groups.warp;
                localSymbolNameLookup[func.groups.funcName] = functions[func.groups.funcName].scratchName;

                procedures += func.groups.funcName + `(` +
                    functionParamList.substring(0, functionParamList.lastIndexOf(',')) + `) {` + trimmedSnippet + '\n}\n\n'


            }
        })

        fileConstructorCode += 'this.symbolNameLookup = ' + JSON.stringify(localSymbolNameLookup) + `
        this.globalVariables = ` + JSON.stringify(globalVars) + `
        this.functionWarpLookup = ` + JSON.stringify(functionWarpLookup);
        fileCode = fileCode.replace('SYMBOL_NAME_LOOKUP', fileConstructorCode);

        fileCode = fileCode.replace('PROCEDURES_DEFINITIONS', procedures);

        var fileName = name + '.js';

        zip.file(fileName, fileCode);
    });

    zip.file('project.js', createProjectFile(files, variableNameGenerator));
    zip.file('broadcaster.js', loadFile('code-generator/code-generator-sample/broadcaster.js'));
    zip.file('sprite.js', loadFile('code-generator/code-generator-sample/sprite.js'));
    zip.file('target-manager.js', loadFile('code-generator/code-generator-sample/target-manager.js'));
    zip.file('global-variable-manager.js',
        createGlobalVariableManager(globalVars, globalSymbolNameLookup, drawList));
    zip.file('package.json', loadFile('code-generator/code-generator-sample/package.json'));

    zip.generateAsync({
            type: "blob"
        })
        .then(function (content) {
            // see FileSaver.js
            var a = document.createElement("a");
            var url = URL.createObjectURL(content);
            a.href = url;
            a.download = 'project.zip';
            document.body.appendChild(a);
            a.click();
        });
}

function loadFile(filePath) {
    var result = null;
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", filePath, false);
    xmlhttp.send();
    if (xmlhttp.status == 200) {
        result = xmlhttp.responseText;
    }
    return result;
}

function createFileSkeleton(name) {
    const fileCode = `import Sprite from './sprite.js';

    class ` + name + ` extends Sprite {
        constructor (broadcaster, globalVariableManager, targetManager, params) {
            super(broadcaster, globalVariableManager, targetManager, params);
            SYMBOL_NAME_LOOKUP
            console.log(params);
        }

        event_whenflagclicked() {

        }

        event_whenkeypressed(key) {

        }

        event_whenthisspriteclicked() {

        }

        event_whenbackdropswitchesto(backdrop) {

        }

        event_whengreaterthan() {

        }

        event_whenbroadcastreceived(message) {

        }

        control_start_as_clone() {

        }

        PROCEDURES_DEFINITIONS

    }

    export default ` + name + `;`;

    return fileCode;

}

function createProjectFile(files, variableNameGenerator) {
    var code = `import Broadcaster from './broadcaster.js';
    import GlobalVariableManager from './global-variable-manager.js';
    import TargetManager from './target-manager.js';
    `

    Object.keys(files).forEach((name) => {
        var jsLegalObjectName = variableNameGenerator.getGeneratedName(name)
        code += 'import ' + jsLegalObjectName + ' from \'./' + name + '.js\';\n';
    });

    code += `
    const broadcaster = new Broadcaster();
    const globalVariableManager = new GlobalVariableManager();
    const targetManager = new TargetManager();
    
    const targets = {\n`;
    Object.keys(files).forEach((name) => {
        var jsLegalObjectName = variableNameGenerator.getGeneratedName(name)
        const targetData = files[name].targetData;
        const targetCostumesList = targetData.sprite.costumes_.map(
            costume => '"' + costume.name + '"');
        var targetParameterList = {
            x: targetData.x,
            y: targetData.y,
            direction: targetData.direction,
            rotationStyle: '"' + targetData.rotationStyle + '"',
            visible: targetData.visible,
            costume: targetData.currentCostume,
            costumes: '[' + targetCostumesList.toString() + ']',
            size: targetData.size,
            effects: targetData.effects,
            drawableID: targetData.drawableID
        }
        code += name + ': new ' + jsLegalObjectName +
            '(broadcaster, globalVariableManager, targetManager, ' +
            JSON.stringify(targetParameterList) + '),\n';
    });
    code += `};
    
    broadcaster.setTargets(targets);
    targetManager.addTargetsObject(targets);
    globalVariableManager.setTargets(targets);
    
    Object.keys(targets).forEach(targetName => {
        targets[targetName].event_whenflagclicked();
    });`

    return code;
}

function createGlobalVariableManager(vars, symbolNameLookup, drawList) {
    var code = `class GlobalVariableManager {
        constructor () {
            this.variables = {
                `
    Object.keys(vars).forEach((variable) => {
        code += variable + ': ' + vars[variable] + ',\n'
    })
    code += `};
            this.symbolNameLookup = ` + JSON.stringify(symbolNameLookup) +
        `;
        this.drawList = ` + drawList + `;
        }

        setTargets(targets) {
            this.targets = targets;
            Object.keys(this.variables).forEach((variable) => {
                Object.keys(this.targets).forEach((target) => {
                    target[variable] = this.variables[variable];
                })
            })
        }
    
        addVariable(name) {
            this.variables[name] = 0;
        }
    
        setVariable(name, value) {
            this.variables[name] = value;
        }
    }
    
    export default GlobalVariableManager;`

    return code;
}
